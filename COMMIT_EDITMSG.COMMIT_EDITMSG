add the package

# --------------
# Please enter the commit message for your changes. Everything below
# this paragraph is ignored, and an empty message aborts the commit.
# Just close the window to accept your message.
diff --git a/algorithms/bubblesort/bubblesort.go b/algorithms/bubblesort/bubblesort.go
new file mode 100644
index 0000000..e204153
--- /dev/null
+++ b/algorithms/bubblesort/bubblesort.go
@@ -0,0 +1,17 @@
+package bubblesort
+
+import (
+	"fmt"
+)
+
+func BubbleSort(value []int) {
+
+	for i := 0; i < len(value)-1; i++ {
+		for j := 0; j < len(value)-1; j++{
+			if value[j] > value[j+1]{
+				value[j],value[j+1] = value[j+1],value[j]
+			} 
+		}
+	}
+}
+1
\ No newline at end of file
diff --git a/algorithms/bubblesort/bubblesort_test.go b/algorithms/bubblesort/bubblesort_test.go
new file mode 100644
index 0000000..b982fa8
--- /dev/null
+++ b/algorithms/bubblesort/bubblesort_test.go
@@ -0,0 +1,21 @@
+package bubblesort
+
+import "testing"
+
+func TestBubbleSort1(t *testing.T) {
+	values := []int{5, 4, 3, 2, 1}
+	BubbleSort(values)
+	if values[0] != 1 || values[1] != 2 || values[2] != 3 || values[3] != 4 ||
+		values[4] != 5 {
+		t.Error("BubbleSort() failed. Got", values, "Expected 1 2 3 4 5")
+	}
+}
+
+func TestBubbleSort2(t *testing.T) {
+	values := []int{5, 5, 3, 2, 1}
+	BubbleSort(values)
+	if values[0] != 1 || values[1] != 2 || values[2] != 3 || values[3] != 5 ||
+		values[4] != 5 {
+		t.Error("BubbleSort() failed. Got", values, "Expected 1 2 3 5 5")
+	}
+}
diff --git a/algorithms/qsort/qsort.go b/algorithms/qsort/qsort.go
new file mode 100644
index 0000000..e69de29
diff --git a/algorithms/qsort/qsort_test.go b/algorithms/qsort/qsort_test.go
new file mode 100644
index 0000000..e69de29
diff --git a/algorithms/unsorted.dat b/algorithms/unsorted.dat
new file mode 100644
index 0000000..3020d95
--- /dev/null
+++ b/algorithms/unsorted.dat
@@ -0,0 +1,4 @@
+123
+306
+123456
+123
\ No newline at end of file
diff --git a/sorter.exe b/sorter.exe
new file mode 100644
index 0000000..f2d8dbd
Binary files /dev/null and b/sorter.exe differ
diff --git a/sorter.go b/sorter.go
new file mode 100644
index 0000000..ad69652
--- /dev/null
+++ b/sorter.go
@@ -0,0 +1,71 @@
+package main
+
+import (
+	"algorithm/bubblesort"
+	"bufio"
+	"flag"
+	"fmt"
+	"io"
+	"os"
+	"strconv"
+)
+
+var infile *string = flag.String("i", "infile", "File contains values for sorting")
+var outfile *string = flag.String("o", "outfile", "File to receive sorted values")
+var algorithm *string = flag.String("a", "qsort", "Sort algorithm")
+
+func readValues(infile string) (values []int, err error) {
+	file, err := os.Open(infile)
+	if err != nil {
+		fmt.Println("open file failed", infile)
+		return
+	}
+	defer file.Close()
+	br := bufio.NewReader(file)
+	values = make([]int, 0)
+	for {
+		line, isPrefix, err1 := br.ReadLine()
+
+		if err1 != nil {
+			if err1 != io.EOF {
+				err = err1
+			}
+		}
+		if isPrefix {
+			fmt.Println("A too long line, seems unexpected")
+			return
+		}
+		str := string(line)
+		value, err1 := strconv.Atoi(str)
+		if err1 != nil {
+			err = err1
+			return
+		}
+		values = append(values, value)
+	}
+	return
+}
+
+func writeValues(values []int, outfile string) error {
+	file, err := os.Create(outfile)
+	if err != nil {
+		fmt.Println("Failed to create the output file ", outfile)
+		return err
+	}
+	defer file.Close()
+	for _, value := range values {
+		str := strconv.Itoa(value)
+		file.WriteString(str + "\n")
+	}
+	return nil
+}
+
+func main() {
+	flag.Parse()
+	if infile != nil {
+		fmt.Println("infile =", *infile, "outfile =", *outfile, "algorithm =",
+			*algorithm)
+	}
+
+	values,err := readValues(*infile)
+	if err != nil